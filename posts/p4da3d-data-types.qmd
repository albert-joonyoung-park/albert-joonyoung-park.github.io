---
title: "[3] Built-In Data Structures, Functions, and Files"
subtitle: "A series of posts, exploring data analysis using the book - Python for Data Analysis, 3E by Wes McKinney"
date: '2023-09-11'
categories: ['Python', 'Data Structure']
description: "Learning notes - Python for Data Analysis, 3E - Wes McKinney"
image: data.jpg
format:
  html:
    code-fold: false
jupyter: python3
---

# Chapter 3: Built-In Data Structures, Functions, and Files

## Data Structures and Sequences

### Tuple

Python Tuples: Immutable, ordered collections that allow you to store a sequence of elements. Tuples are defined using parentheses and can hold a mix of data types. They offer efficient data storage, are iterable, and can be used as keys in dictionaries. In this blog, we'll explore the versatility of Python tuples and how to leverage them for various data analysis tasks.

```{python}

# create some tuples
tup = (4, 5, 6)
tup2 = 7, 8, 9
print(tup)
print(tup2)
t = (tup, tup2)    # tuple of tuples
print(t)
type(t)

# convert any sequence or iterator to tuple
print(tuple(['a', 'b', 'c']))
print(tuple('Some String'))

# access elements
nested_tup = ((4,5,6), (7,8))
print(nested_tup[1])
```

Tuple itself is immutable; however, if an object inside a tuple is mutable, you can modify it in place.

```{python}
tup = tuple(['The bown ','fox ', 'jumped over the ',['fence.']])
print(tup)
# tup[1] = 'wolf'           # error
tup[3][0] = 'window '     # ok
print(tup)
tup[3].append('fence')    # ok
print(tup)

```

Concatenation, Variable swap, Unpacking

```{python}

# concatenation using +
tup = (4, None, 'foo') + (6, 0) + ('bar',)
print(tup)

# Swap
a, b = 1, 2
print(a, b)
b, a = a, b
print(a, b)

# Unpacking by iterating over sequences of tuples, lists
seq = [('a1', 'a2', 'a3'),('b4', 'b5', 'b6'), ('c7', 'c8', 'c9')]
print(seq, type(seq))
for a, b, c in seq:
  print(f'a={a}, b={b}, c={c}')
  
# unpacking using assignment, not concerning some trailing values
values = 1, 2, 3, 4, 5, 6, 7
a, b, *_ = values     # *rest works the same as *_
print (a, b, *_)

# method .count()
a = (1, 2, 2, 2, 3, 4, 2)
print(a.count(2))     # number of occurences


```

### List

Python Lists: Ordered, mutable collections that allow you to store and manipulate sequences of items. Lists are versatile and can hold various data types. They support methods for adding, removing, and modifying elements, making them a fundamental data structure for data analysis and manipulation in Python.

```{python}

# create, convert lists
a_list = [2, 3, 7, None]
tup = ("foo", "bar", "baz")
b_list = list(tup)
print(b_list, type(b_list))

# Access, modify list element
b_list[1] = "peekaboo"
print(b_list)

# Materialize an iterator / generator
gen = range(20) # generator, not materialized yet.
print(gen) 
list(gen) # materialize the generator to list

# Work with the elements
b_list.append("dwarf")     # add to the end of list
b_list.append("foo")
print(b_list)
b_list.insert(1, "RED")     # insert at specific location, consider using collections.deque for efficiency
print(b_list)
b_list.remove("foo")        # remove the first occurence only
print(b_list)

# Check if element in the list
print("dwarf" in b_list)
print("dwarf" not in b_list)


```

```{python}

# Concatenate and combine lists
new_list = [4, None, "foo"] + [7, 8, (2, 3)]
print(new_list)
print(b_list)
new_list.extend(b_list)
print(new_list)

# Sorting in place
a = ["saw", "small", "He", "foxes", "six"]
a.sort() # default
print(a)
a.sort(key=len) # sort by key with given function, by the length of each element
print(a)

# Sorted copy
a = ["saw", "small", "He", "foxes", "six"]
sorted_copy = sorted(a)
print(sorted_copy)


```

```{python}

# Slices

seq = [7, 2, 3, 7, 5, 6, 0, 1]
print(seq)
print(seq[1:5])   # index:1 - index: 4
print(seq[:5])    # index:beginning - index: 4
print(seq[5:])    # index:5 - index:last
print(seq[-4:])   # Indexing from the last, index:-4 to the end
print(seq[-6:-2]) # Indexing from the last, index: -6 to index: -2

print("-"*30)

# Stepping the list
print(seq[::2])     # Extract index 0, 2, 4, 6 ....
print(seq[::3])     # Extract index 0, 3, 6 ....
print(seq[::-2])    # Extract index -1, -3, -5 .....
print(seq[::-1])    # Extract index -1, -2, -3, -4 ... effectively reverse the list or tuple


print("-"*30)

# Slices replacement
seq[3:5] = ['A','B']
print(seq)

```

### Dictionary

Python Dictionaries: Versatile and dynamic data structures that store key-value pairs, allowing for efficient data retrieval and manipulation. Dictionaries are unordered collections that provide a way to map unique keys to associated values, making them invaluable for tasks like data storage, lookup tables, and configuration settings

```{python}

# Create a Dictionary (aka, hash-map, associative arrays)

empty_dict = {} 
print(empty_dict)
d1 = {"a": "some value", "b": [1, 2, 3, 4]}  # key-value pair
print(d1)

# Access, insert and set
d1[7] = "an integer"      # 7:"an integer" pair
print(d1)
print(d1["b"])            # lookup with key
#print(d1["address"])     # KeyError
print("address" in d1)    # key exists?

print("-"*30)

# Delete values
del d1[7]              # delete with key
#del d1["country"]     # KeyError
print(d1)
ret = d1.pop("b")      # delete with key and return the value
print(ret)
print(d1)

print("-"*30)

# Iteration using keys() values() items()
d1 = {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
print(type(d1.keys()))     # <class 'dict_keys'>
print(type(d1.values()))   # <class 'dict_values'>

d1_keys = list(d1.keys())   
d1_values = list(d1.values())
d1_items = list(d1.items())  # Gives a list of tuples in (key, value)
print(d1_keys)
print(d1_values)
print(d1_items)  

# iteration
for key, value in d1.items():
  print(f'Key: \"{key}\" has value of \"{value}\".')


```

```{python}

# Update dictionary with a dictionary of new or changes of key-value pairs
d1 = {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
print(d1)
d1.update({"b": "foo", "c": 12})
print(d1)
```

```{python}

# Create a dictionary from two sequences

list_country = ["USA", "Canada", "England", "France"]
list_city = ["Washigton", "Ottawa", "London", "Paris"]
print(list_country)
print(list_city)

# Using for loop - zip and iterate
print(zip(list_country, list_city))

mapping = {}
for key, value in zip(list_country, list_city):
  mapping[key] = value
print(mapping, type(mapping))

# Using dict() method
country_city_tuples = zip(list_country, list_city)
print(country_city_tuples, type(country_city_tuples))
mapping = dict(country_city_tuples)
print(mapping, type(mapping))

```

```{python}

# Build a dictionary WUTHOUT using setdefault()
words = ["apple", "bat", "bar", "atom", "book"]
print(words, type(words))

by_letter = {}

for word in words:
  letter = word[0] # Using the first letter of each word as key
  if letter not in by_letter:
    by_letter[letter] = [word]
  else:
    by_letter[letter].append(word)

print(by_letter)

print("-"*55)

# Simplified version using setdefault()

words = ["apple", "bat", "bar", "atom", "book"]
by_letter = {}
for word in words:
  letter = word[0] # Using the first letter of each word as key
  by_letter.setdefault(letter, []).append(word) # If the letter (the first letter of the current word) is already a key in the dictionary, it returns the corresponding value (which is a list) for that key. If the key doesn't exist, it initializes an empty list. The append() method is then used to add the current word to the list associated with the letter key.
print(by_letter)

print("-"*55)

# Using defaultdict from collections module
from collections import defaultdict

words = ["apple", "bat", "bar", "atom", "book"]
by_letter = defaultdict(list) # if you access a key that doesn't exist, it will automatically create that key with an empty list as the associated value. This is particularly useful when you want to avoid KeyError exceptions when working with dictionaries.
print(by_letter, type(by_letter))

for word in words:
  by_letter[word[0]].append(word)

print(by_letter)

```

**Understanding Dictionary Key Types**

In Python, dictionaries are versatile data structures used for mapping keys to corresponding values. While dictionaries allow flexibility in storing values of any Python data type as their values, there are specific requirements and considerations when it comes to selecting suitable key types. This aspect of dictionary design is crucial to ensure efficient and reliable key-value pair lookups and operations.

**Key Characteristics of Dictionary Keys**

1.  **Immutability Requirement:**

    The primary requirement for dictionary keys is that they should generally be **immutable objects**. Immutability refers to the property of an object that prevents its state from being modified after it is created.

2.  **Examples of Immutable Key Types:**

    -   **Scalar Types:** Examples of immutable scalar types suitable as dictionary keys include integers (**`int`**), floating-point numbers (**`float`**), and strings (**`str`**). These types are inherently immutable, which means once you create a key with a specific value, that key-value pair remains consistent.

    -   **Tuples as Composite Keys:** Tuples can also serve as dictionary keys, but there's an important condition: all the objects within the tuple must also be immutable. This ensures the stability of the key, as the tuple itself remains unchanged.

**The Significance of Hashability**

The technical term that ties these requirements together is **"hashability."** Hashability refers to an object's ability to be hashed, which involves converting the object into a fixed-size numerical value, known as a hash code. This hash code is used as an index to efficiently store and retrieve key-value pairs in a dictionary. The key feature of hashable objects is that they produce the same hash code consistently.

**The Role of the `hash()` Function**

You can determine whether an object is hashable and can be used as a dictionary key by utilizing the built-in **`hash()`** function. When you apply the **`hash()`** function to an object, it returns a hash code if the object is hashable. However, keep in mind that not all Python objects are hashable, particularly mutable objects like lists and dictionaries.

```{python}

# Using hash() to validate key types in dictionary

hash("string")           # hashable
hash((1, 2, (2, 3)))     # hashable
# hash((1, 2, [2, 3]))     # Not hashable due to mutable element - list of [2, 3]

# When in need of list for key, convert it tp tuple, hashable
d = {}
d[tuple([1,2,3])] = 5
print(d)  # dictionary with a tuple as key


```

### Set

Sets in Python: A Set is an essential data structure that represents an unordered collection of unique elements. Unlike lists or tuples, which allow duplicates, sets only store distinct values. This characteristic makes sets ideal for various tasks, such as removing duplicates from a list, checking for membership, and performing set operations like union, intersection, and difference. One of the most common real-world use cases for sets is in data deduplication, where they excel at efficiently eliminating duplicate records from datasets, ensuring data integrity and enhancing the performance of data processing tasks.

```{python}

# Create a set
print(set([2, 2, 2, 1, 3, 3]))
print

# Union, Difference, Intersection and Symmetric Difference
a = {1, 2, 3, 4, 5}
b = {3, 4, 5, 6, 7, 8}
print ("Set a:", a, " Set b:", b)

# a.union(b) = a | b
print("a union b: ", a.union(b), a | b)
# a.intersection(b) = a & b
print("a intersection b: ", a.intersection(b), a & b)
# a.difference(b) = a - b
print("a difference b: ", a.difference(b), a - b)
# a.symmetric_difference(b)
print("a.symmetric_difference(b): ", a.symmetric_difference(b), a ^ b)

```

```{python}

# Common set operations
a = {1, 2, 3, 4, 5}

# a.add(x) - Add x to the set
a.add("Fox")
print(a)
# a.remove(x) - Remove x from the set
a.remove("Fox")
print(a)
# a.pop() - Remove an element arbitrarily, set must not be empty
ret = a.pop()
print(a, ret)



# a.clear() - reset to empty
print(a.clear())  # None - empty
```

Built-in Sequence Functions

```{python}

a_list = [7, 1, 2, 6, 0, 3, 2]

# Very useful, use at every opportunities

# enumerate() - no need to write code to track index
for index, value in enumerate(a_list):
  print(index, " : ", value)  

# sorted() - a new srted list from the elements of any sequence
print(sorted(a_list))
print(sorted("horse race"))  # string is a sequence

# zip() - pairs up sequences element-wise to create a list
seq1 = ["foo", "bar", "baz"]
seq2 = ["one", "two", "three"]
seq3 = ["BROWN", "FOX", "FENCE", "JUMP"]
zipped = zip(seq1, seq2, seq3)
print(list(zipped))  # "JUMP" ignored for pariing!

# zip() commonly works with enumerate() for iteration - zip and iterate
for index, (a, b) in enumerate(zip(seq1, seq2)):
  print(f"{index}: {a}, {b}")

# reversed()
reversed(range(10)) # range_iterator object, it's a generator
print(list(reversed(range(10)))) # list() materializes the generator


```

### List, Set and Dictionary Comprehensions

Comprehensions in Python offer concise, readable, and often more efficient ways to create lists, sets, and dictionaries. They reduce code verbosity, enhance readability, and promote a functional programming style, ultimately leading to cleaner and more maintainable code.

**List Comprehension:**

List comprehensions provide a concise way to create lists by applying an expression to each item in an iterable (e.g., a list, tuple, or range) and optionally filtering the items based on a condition.

```{python}

## [exp for value in collection if condition]

# create a list of strings in uppercase only if the string has more than two characters.
strings = ["a", "as", "bat", "car", "dove", "python"]
strings_2 = [ str.upper() for str in strings if len(str) > 2 ]
print(strings_2)

# create a list of squares of even numbers from 0 to 9
even_squares = [ x ** 2 for x in range(10) if x % 2 == 0 ]
print(even_squares)

```

**Set Comprehension:**

Set comprehensions allow you to create sets in a similar manner to list comprehensions, but with the guarantee of uniqueness among elements.

```{python}

## set_comp = {expr for value in collection if condition}

# Create a set using strings list above, containing only the lengths of strings.
strings = ["a", "as", "bat", "car", "dove", "python"]
unique_lengths = { len(str) for str in strings } # uniqueness guaranted
print(unique_lengths)

# map() - even more powerful
strings_map = set(map(len, strings))
print(strings_map)

# Create a set of unique even squares from 0 to 9
even_squares_set = {x ** 2 for x in range(10) if x % 2 == 0}
print(even_squares_set)

```

**Dictionary Comprehension**:

Dictionary comprehensions enable the creation of dictionaries by defining key-value pairs based on expressions applied to items in an iterable.

```{python}

## {key_expression: value_expression for item in iterable if condition}

# Create a dictionary, mapping even numbers to their squares from 0 to 9
even_squares_dict = { x: x**2 for x in range(10) if x % 2 == 0 }
print(even_squares_dict)

# Create a dictionary of lookup map of string for the location of each string in the list
strings = ["a", "as", "bat", "car", "dove", "python"]
string_lookup_dict = { str: index for index, str in enumerate(strings) }
print(strings)
print(string_lookup_dict)

```

Nested list comprehensions

The order of

```{python}

# List of lists with some English and Spanish names - List nesting lists
all_data = [
  ["John", "Emily", "Michael", "Mary", "Steven"],
  ["Maria", "Juan", "Javier", "Natalia", "Pilar"]
]
print(all_data)
print("-"*55)

# Create a list of names contating two of more of 'a'
# The non-Pythonic apporach using for loop..
names_of_interest = []
for names in all_data:
  print("Processing:", names)
  enough_as = [ name for name in names if name.count("a") >=2 ]
  print(enough_as)
  names_of_interest.extend(enough_as)
print("Results: ", names_of_interest)

# Re-writtine in one-liner using nested list comprehension
names_of_interest = [ name for names in all_data for name in names if name.count("a") >=2 ]
print("Result using Nested List Comprehension: ", names_of_interest)

# Flatten a list of tuples of integers into a simple list of integers using nested list comprehension
some_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
print(some_tuples, type(some_tuples)) # list of tuples with integers
flattened = [ int for tuple in some_tuples for int in tuple ]
print("Flattened: ", flattened, type(flattened))  # flattend list

# Readability and valid forms
flattened = []
print("Init. flattened list: ", flattened)
print("some_tuples: ", some_tuples)
for tup in some_tuples:
  for x in tup:
    flattened.append(x)
print("flattend from some_tuples: ", flattened)

# list comprehenson inside list comprehension
# Change list of tuples to a list of lists
print("Init. list of some_tuples: ", some_tuples)
new_list_of_lists = [[ x for x in tup ] for tup in some_tuples ]
print("List of lists from some_tuples: ", new_list_of_lists)


  
  
```

```{python}
# 6 Practical use caes of nested list comprehension

# 1. Matrix operations:
# Add 1 to each element in a 2D matrix
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix_add_1 = [[ element + 1 for element in row] for row in matrix]
print("matrix_add_1: ", matrix_add_1)

# 2. Data transformation:
# Filter rows with even some from a list of lists
data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
filtered_data = [ row for row in data if sum(row) % 2 == 0 ]
print("filtered_data: ", filtered_data)

# 3. Flattening lists of lists:
nested_lists = [[1, 2], [3, 4], [5, 6]]
flattened_list = [ item for sublist in nested_lists for item in sublist ]
print("flattened_list: ", flattened_list)

# 4. Combining data:
# Create all possible pairs (in tuple) from two lists - Different from element-wise pairing using zip()
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
combinations = [ (x, y) for x in list1 for y in list2 ]
print("combinations: ", combinations)

# 5. Conditional filtering:
# Filter rows containing 'John' from a list of lists
data = [['Alice', 25], ['John', 30], ['Bob', 35]]
filtered_data = [ list for list in data if 'John' in list ]
print("filtered_data: ", filtered_data)

# 6. Transposing data:
# Transpose a given matrix (switching rows and columns)
matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
transposed_matrix = [[ (row[i], print("row[i]: ", row[i]), print("processing row: ", row)) for row in matrix ] for i in range(len(matrix[0]))]
#print("transposed_matrix: ", transposed_matrix)
#print(len(matrix[0]))
#print(range(len(matrix[0])))

```

### Functions
