---
title: "[3] Built-In Data Structures, Functions, and Files"
subtitle: "A series of posts, exploring data analysis using the book - Python for Data Analysis, 3E by Wes McKinney"
date: '2023-09-11'
categories: ['Python', 'Data Structure']
description: "Learning notes - Python for Data Analysis, 3E - Wes McKinney"
image: data.jpg
format:
  html:
    code-fold: false
jupyter: python3
---

------------------------------------------------------------------------

## Data Structures and Sequences

### Tuple

Python Tuples: Immutable, ordered collections that allow you to store a sequence of elements. Tuples are defined using parentheses and can hold a mix of data types. They offer efficient data storage, are iterable, and can be used as keys in dictionaries. In this blog, we'll explore the versatility of Python tuples and how to leverage them for various data analysis tasks.

```{python}

# create some tuples
tup = (4, 5, 6)
tup2 = 7, 8, 9
print(tup)
print(tup2)
t = (tup, tup2)    # tuple of tuples
print(t)
type(t)

# convert any sequence or iterator to tuple
print(tuple(['a', 'b', 'c']))
print(tuple('Some String'))

# access elements
nested_tup = ((4,5,6), (7,8))
print(nested_tup[1])
```

Tuple itself is immutable; however, if an object inside a tuple is mutable, you can modify it in place.

```{python}
tup = tuple(['The bown ','fox ', 'jumped over the ',['fence.']])
print(tup)
# tup[1] = 'wolf'           # error
tup[3][0] = 'window '     # ok
print(tup)
tup[3].append('fence')    # ok
print(tup)

```

Concatenation, Variable swap, Unpacking

```{python}

# concatenation using +
tup = (4, None, 'foo') + (6, 0) + ('bar',)
print(tup)

# Swap
a, b = 1, 2
print(a, b)
b, a = a, b
print(a, b)

# Unpacking by iterating over sequences of tuples, lists
seq = [('a1', 'a2', 'a3'),('b4', 'b5', 'b6'), ('c7', 'c8', 'c9')]
print(seq, type(seq))
for a, b, c in seq:
  print(f'a={a}, b={b}, c={c}')
  
# unpacking using assignment, not concerning some trailing values
values = 1, 2, 3, 4, 5, 6, 7
a, b, *_ = values     # *rest works the same as *_
print (a, b, *_)

# method .count()
a = (1, 2, 2, 2, 3, 4, 2)
print(a.count(2))     # number of occurences


```

### List

Python Lists: Ordered, mutable collections that allow you to store and manipulate sequences of items. Lists are versatile and can hold various data types. They support methods for adding, removing, and modifying elements, making them a fundamental data structure for data analysis and manipulation in Python.

```{python}

# create, convert lists
a_list = [2, 3, 7, None]
tup = ("foo", "bar", "baz")
b_list = list(tup)
print(b_list, type(b_list))

# Access, modify list element
b_list[1] = "peekaboo"
print(b_list)

# Materialize an iterator / generator
gen = range(20) # generator, not materialized yet.
print(gen) 
list(gen) # materialize the generator to list

# Work with the elements
b_list.append("dwarf")     # add to the end of list
b_list.append("foo")
print(b_list)
b_list.insert(1, "RED")     # insert at specific location, consider using collections.deque for efficiency
print(b_list)
b_list.remove("foo")        # remove the first occurence only
print(b_list)

# Check if element in the list
print("dwarf" in b_list)
print("dwarf" not in b_list)


```

```{python}

# Concatenate and combine lists
new_list = [4, None, "foo"] + [7, 8, (2, 3)]
print(new_list)
print(b_list)
new_list.extend(b_list)
print(new_list)

# Sorting in place
a = ["saw", "small", "He", "foxes", "six"]
a.sort() # default
print(a)
a.sort(key=len) # sort by key with given function, by the length of each element
print(a)

# Sorted copy
a = ["saw", "small", "He", "foxes", "six"]
sorted_copy = sorted(a)
print(sorted_copy)


```

```{python}

# Slices

seq = [7, 2, 3, 7, 5, 6, 0, 1]
print(seq)
print(seq[1:5])   # index:1 - index: 4
print(seq[:5])    # index:beginning - index: 4
print(seq[5:])    # index:5 - index:last
print(seq[-4:])   # Indexing from the last, index:-4 to the end
print(seq[-6:-2]) # Indexing from the last, index: -6 to index: -2

print("-"*30)

# Stepping the list
print(seq[::2])     # Extract index 0, 2, 4, 6 ....
print(seq[::3])     # Extract index 0, 3, 6 ....
print(seq[::-2])    # Extract index -1, -3, -5 .....
print(seq[::-1])    # Extract index -1, -2, -3, -4 ... effectively reverse the list or tuple


print("-"*30)

# Slices replacement
seq[3:5] = ['A','B']
print(seq)

```

### Dictionary

Python Dictionaries: Versatile and dynamic data structures that store key-value pairs, allowing for efficient data retrieval and manipulation. Dictionaries are unordered collections that provide a way to map unique keys to associated values, making them invaluable for tasks like data storage, lookup tables, and configuration settings

```{python}

# Create a Dictionary (aka, hash-map, associative arrays)

empty_dict = {} 
print(empty_dict)
d1 = {"a": "some value", "b": [1, 2, 3, 4]}  # key-value pair
print(d1)

# Access, insert and set
d1[7] = "an integer"      # 7:"an integer" pair
print(d1)
print(d1["b"])            # lookup with key
#print(d1["address"])     # KeyError
print("address" in d1)    # key exists?

print("-"*30)

# Delete values
del d1[7]              # delete with key
#del d1["country"]     # KeyError
print(d1)
ret = d1.pop("b")      # delete with key and return the value
print(ret)
print(d1)

print("-"*30)

# Iteration using keys() values() items()
d1 = {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
print(type(d1.keys()))     # <class 'dict_keys'>
print(type(d1.values()))   # <class 'dict_values'>

d1_keys = list(d1.keys())   
d1_values = list(d1.values())
d1_items = list(d1.items())  # Gives a list of tuples in (key, value)
print(d1_keys)
print(d1_values)
print(d1_items)  

# iteration
for key, value in d1.items():
  print(f'Key: \"{key}\" has value of \"{value}\".')


```

```{python}

# Update dictionary with a dictionary of new or changes of key-value pairs
d1 = {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}
print(d1)
d1.update({"b": "foo", "c": 12})
print(d1)
```

```{python}

# Create a dictionary from two sequences

list_country = ["USA", "Canada", "England", "France"]
list_city = ["Washigton", "Ottawa", "London", "Paris"]
print(list_country)
print(list_city)

# Using for loop - zip and iterate
print(zip(list_country, list_city))

mapping = {}
for key, value in zip(list_country, list_city):
  mapping[key] = value
print(mapping, type(mapping))

# Using dict() method
country_city_tuples = zip(list_country, list_city)
print(country_city_tuples, type(country_city_tuples))
mapping = dict(country_city_tuples)
print(mapping, type(mapping))

```

```{python}

# Build a dictionary WUTHOUT using setdefault()
words = ["apple", "bat", "bar", "atom", "book"]
print(words, type(words))

by_letter = {}

for word in words:
  letter = word[0] # Using the first letter of each word as key
  if letter not in by_letter:
    by_letter[letter] = [word]
  else:
    by_letter[letter].append(word)

print(by_letter)

print("-"*55)

# Simplified version using setdefault()

words = ["apple", "bat", "bar", "atom", "book"]
by_letter = {}
for word in words:
  letter = word[0] # Using the first letter of each word as key
  by_letter.setdefault(letter, []).append(word) # If the letter (the first letter of the current word) is already a key in the dictionary, it returns the corresponding value (which is a list) for that key. If the key doesn't exist, it initializes an empty list. The append() method is then used to add the current word to the list associated with the letter key.
print(by_letter)

print("-"*55)

# Using defaultdict from collections module
from collections import defaultdict

words = ["apple", "bat", "bar", "atom", "book"]
by_letter = defaultdict(list) # if you access a key that doesn't exist, it will automatically create that key with an empty list as the associated value. This is particularly useful when you want to avoid KeyError exceptions when working with dictionaries.
print(by_letter, type(by_letter))

for word in words:
  by_letter[word[0]].append(word)

print(by_letter)

```

**Understanding Dictionary Key Types**

In Python, dictionaries are versatile data structures used for mapping keys to corresponding values. While dictionaries allow flexibility in storing values of any Python data type as their values, there are specific requirements and considerations when it comes to selecting suitable key types. This aspect of dictionary design is crucial to ensure efficient and reliable key-value pair lookups and operations.

**Key Characteristics of Dictionary Keys**

1.  **Immutability Requirement:**

    The primary requirement for dictionary keys is that they should generally be **immutable objects**. Immutability refers to the property of an object that prevents its state from being modified after it is created.

2.  **Examples of Immutable Key Types:**

    -   **Scalar Types:** Examples of immutable scalar types suitable as dictionary keys include integers (**`int`**), floating-point numbers (**`float`**), and strings (**`str`**). These types are inherently immutable, which means once you create a key with a specific value, that key-value pair remains consistent.

    -   **Tuples as Composite Keys:** Tuples can also serve as dictionary keys, but there's an important condition: all the objects within the tuple must also be immutable. This ensures the stability of the key, as the tuple itself remains unchanged.

**The Significance of Hashability**

The technical term that ties these requirements together is **"hashability."** Hashability refers to an object's ability to be hashed, which involves converting the object into a fixed-size numerical value, known as a hash code. This hash code is used as an index to efficiently store and retrieve key-value pairs in a dictionary. The key feature of hashable objects is that they produce the same hash code consistently.

**The Role of the `hash()` Function**

You can determine whether an object is hashable and can be used as a dictionary key by utilizing the built-in **`hash()`** function. When you apply the **`hash()`** function to an object, it returns a hash code if the object is hashable. However, keep in mind that not all Python objects are hashable, particularly mutable objects like lists and dictionaries.

```{python}

# Using hash() to validate key types in dictionary

hash("string")           # hashable
hash((1, 2, (2, 3)))     # hashable
# hash((1, 2, [2, 3]))     # Not hashable due to mutable element - list of [2, 3]

# When in need of list for key, convert it tp tuple, hashable
d = {}
d[tuple([1,2,3])] = 5
print(d)  # dictionary with a tuple as key


```

### Set

Sets in Python: A Set is an essential data structure that represents an unordered collection of unique elements. Unlike lists or tuples, which allow duplicates, sets only store distinct values. This characteristic makes sets ideal for various tasks, such as removing duplicates from a list, checking for membership, and performing set operations like union, intersection, and difference. One of the most common real-world use cases for sets is in data deduplication, where they excel at efficiently eliminating duplicate records from datasets, ensuring data integrity and enhancing the performance of data processing tasks.

```{python}

# Create a set
print(set([2, 2, 2, 1, 3, 3]))
print

# Union, Difference, Intersection and Symmetric Difference
a = {1, 2, 3, 4, 5}
b = {3, 4, 5, 6, 7, 8}
print ("Set a:", a, " Set b:", b)

# a.union(b) = a | b
print("a union b: ", a.union(b), a | b)
# a.intersection(b) = a & b
print("a intersection b: ", a.intersection(b), a & b)
# a.difference(b) = a - b
print("a difference b: ", a.difference(b), a - b)
# a.symmetric_difference(b)
print("a.symmetric_difference(b): ", a.symmetric_difference(b), a ^ b)

```

```{python}

# Common set operations
a = {1, 2, 3, 4, 5}

# a.add(x) - Add x to the set
a.add("Fox")
print(a)
# a.remove(x) - Remove x from the set
a.remove("Fox")
print(a)
# a.pop() - Remove an element arbitrarily, set must not be empty
ret = a.pop()
print(a, ret)



# a.clear() - reset to empty
print(a.clear())  # None - empty
```

Built-in Sequence Functions

```{python}

a_list = [7, 1, 2, 6, 0, 3, 2]

# Very useful, use at every opportunities

# enumerate() - no need to write code to track index
for index, value in enumerate(a_list):
  print(index, " : ", value)  

# sorted() - a new srted list from the elements of any sequence
print(sorted(a_list))
print(sorted("horse race"))  # string is a sequence

# zip() - pairs up sequences element-wise to create a list
seq1 = ["foo", "bar", "baz"]
seq2 = ["one", "two", "three"]
seq3 = ["BROWN", "FOX", "FENCE", "JUMP"]
zipped = zip(seq1, seq2, seq3)
print(list(zipped))  # "JUMP" ignored for pariing!

# zip() commonly works with enumerate() for iteration - zip and iterate
for index, (a, b) in enumerate(zip(seq1, seq2)):
  print(f"{index}: {a}, {b}")

# reversed()
reversed(range(10)) # range_iterator object, it's a generator
print(list(reversed(range(10)))) # list() materializes the generator


```

### List, Set and Dictionary Comprehensions

Comprehensions in Python offer concise, readable, and often more efficient ways to create lists, sets, and dictionaries. They reduce code verbosity, enhance readability, and promote a functional programming style, ultimately leading to cleaner and more maintainable code.

**List Comprehension:**

List comprehensions provide a concise way to create lists by applying an expression to each item in an iterable (e.g., a list, tuple, or range) and optionally filtering the items based on a condition.

```{python}

## [exp for value in collection if condition]

# create a list of strings in uppercase only if the string has more than two characters.
strings = ["a", "as", "bat", "car", "dove", "python"]
strings_2 = [ str.upper() for str in strings if len(str) > 2 ]
print(strings_2)

# create a list of squares of even numbers from 0 to 9
even_squares = [ x ** 2 for x in range(10) if x % 2 == 0 ]
print(even_squares)

```

**Set Comprehension:**

Set comprehensions allow you to create sets in a similar manner to list comprehensions, but with the guarantee of uniqueness among elements.

```{python}

## set_comp = {expr for value in collection if condition}

# Create a set using strings list above, containing only the lengths of strings.
strings = ["a", "as", "bat", "car", "dove", "python"]
unique_lengths = { len(str) for str in strings } # uniqueness guaranted
print(unique_lengths)

# map() - even more powerful
strings_map = set(map(len, strings))
print(strings_map)

# Create a set of unique even squares from 0 to 9
even_squares_set = {x ** 2 for x in range(10) if x % 2 == 0}
print(even_squares_set)

```

**Dictionary Comprehension**:

Dictionary comprehensions enable the creation of dictionaries by defining key-value pairs based on expressions applied to items in an iterable.

```{python}

## {key_expression: value_expression for item in iterable if condition}

# Create a dictionary, mapping even numbers to their squares from 0 to 9
even_squares_dict = { x: x**2 for x in range(10) if x % 2 == 0 }
print(even_squares_dict)

# Create a dictionary of lookup map of string for the location of each string in the list
strings = ["a", "as", "bat", "car", "dove", "python"]
string_lookup_dict = { str: index for index, str in enumerate(strings) }
print(strings)
print(string_lookup_dict)

```

Nested list comprehensions

The order of

```{python}

# List of lists with some English and Spanish names - List nesting lists
all_data = [
  ["John", "Emily", "Michael", "Mary", "Steven"],
  ["Maria", "Juan", "Javier", "Natalia", "Pilar"]
]
print(all_data)
print("-"*55)

# Create a list of names contating two of more of 'a'
# The non-Pythonic apporach using for loop..
names_of_interest = []
for names in all_data:
  print("Processing:", names)
  enough_as = [ name for name in names if name.count("a") >=2 ]
  print(enough_as)
  names_of_interest.extend(enough_as)
print("Results: ", names_of_interest)

# Re-writtine in one-liner using nested list comprehension
names_of_interest = [ name for names in all_data for name in names if name.count("a") >=2 ]
print("Result using Nested List Comprehension: ", names_of_interest)

# Flatten a list of tuples of integers into a simple list of integers using nested list comprehension
some_tuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]
print(some_tuples, type(some_tuples)) # list of tuples with integers
flattened = [ int for tuple in some_tuples for int in tuple ]
print("Flattened: ", flattened, type(flattened))  # flattend list

# Readability and valid forms
flattened = []
print("Init. flattened list: ", flattened)
print("some_tuples: ", some_tuples)
for tup in some_tuples:
  for x in tup:
    flattened.append(x)
print("flattend from some_tuples: ", flattened)

# list comprehenson inside list comprehension
# Change list of tuples to a list of lists
print("Init. list of some_tuples: ", some_tuples)
new_list_of_lists = [[ x for x in tup ] for tup in some_tuples ]
print("List of lists from some_tuples: ", new_list_of_lists)


  
  
```

```{python}
# 6 Practical use caes of nested list comprehension

# 1. Matrix operations:
# Add 1 to each element in a 2D matrix
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix_add_1 = [[ element + 1 for element in row] for row in matrix]
print("matrix_add_1: ", matrix_add_1)

# 2. Data transformation:
# Filter rows with even some from a list of lists
data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
filtered_data = [ row for row in data if sum(row) % 2 == 0 ]
print("filtered_data: ", filtered_data)

# 3. Flattening lists of lists:
nested_lists = [[1, 2], [3, 4], [5, 6]]
flattened_list = [ item for sublist in nested_lists for item in sublist ]
print("flattened_list: ", flattened_list)

# 4. Combining data:
# Create all possible pairs (in tuple) from two lists - Different from element-wise pairing using zip()
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
combinations = [ (x, y) for x in list1 for y in list2 ]
print("combinations: ", combinations)

# 5. Conditional filtering:
# Filter rows containing 'John' from a list of lists
data = [['Alice', 25], ['John', 30], ['Bob', 35]]
filtered_data = [ list for list in data if 'John' in list ]
print("filtered_data: ", filtered_data)

# 6. Transposing data:
# Transpose a given matrix (switching rows and columns)
matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
transposed_matrix = [[ (row[i], print("row[i]: ", row[i]), print("processing row: ", row)) for row in matrix ] for i in range(len(matrix[0]))]
#print("transposed_matrix: ", transposed_matrix)
#print(len(matrix[0]))
#print(range(len(matrix[0])))

```

## Functions

Functions in Python are a cornerstone of the language, offering powerful tools for structuring and modularizing code. Python functions come with several unique features that distinguish them from functions in other programming languages.

-   **Versatile and Expressive:** Python functions support both positional and keyword arguments, enabling flexible and expressive function calls.

-   **Multiple Return Values:** Python functions can return multiple values, simplifying the packaging and unpacking of results.

-   **Default Argument Values:** Python functions allow for default argument values, making function usage more straightforward by providing sensible defaults when arguments are omitted.

-   **Lambda Functions:** Python features lambda functions for concise and anonymous function definitions, particularly useful for simple operations.

-   **First-Class Functions:** Python treats functions as first-class citizens, allowing them to be assigned to variables, passed as arguments, and returned from other functions. This flexibility enhances code modularity, maintainability, and readability.

-   **Modular and Reusable:** Python's function-centric approach encourages the creation of clean, reusable, and modular code, making it a crucial topic for all Python programmers to master.

```{python}

# simple declaration and calling
def my_function(x,y):
  return x + y

ret = my_function(1, 2)
print(ret)

# Return None when no retorn statement is encountered
def funciton_without_return(x):
  print(x)
result = funciton_without_return("hello!")
print(result)

# positional and keyword arguments
def my_function2(x, y, z=1.5):  # z as keyword argument with default value
  if z > 1:
    return z * (x + y)
  else:
    return z / (x + y)

# Naespace, scope and local functions


print(my_function2(5, 6, z=0.7))  # no need to put arg names, keword arg optional
print(my_function2(3.14, 7, 3.5))  # no need to specify name for kewoord arguments
print(my_function2(10, 20))   # keyword arg optional


a = []
def func():
  for i in range(5):
    a.append(i)

func()
```

```{python}

# Assigining variable outside the function's scope

a = None
def bind_a_variable():
  global a
  a = []
  
bind_a_variable()
print(a)

# multiple returns
def f():
  a = 5
  b = 6
  c = 7
  return a, b, c

a, b, c = f()
print(a, b)
```

### **Functions Are Objects**

In Python, functions are first-class objects, which means they are treated like any other object, such as integers, strings, or lists. This concept is a fundamental part of the Python language and has several implications and practical uses.

1.  **Functions can be assigned to variables**:

```{python}

# Functions can be assigned to variables:

def greet(name):
    return f"Hello, {name}!"

greeting = greet  # function assigned to variable 
print(greeting("Alice"))  # calling the function using the assigned variable

print(id(greet), id(greeting)) # both variable and function references the same object

```

2.  **Functions can be passed as arguments**: This is particularly useful for functions that require a *callback* or *custom behavior*.

```{python}

# Functions can be passed as arguments

def apply(func, value):
  return func(value)

def double(x):
  return x * 2

result = apply(double, 5)
print(result)

```

3.  **Functions can be returned from other functions**: This enables dynamic function generation.

```{python}

# Functinos can be returned from other functions
def create_multiplier(factor):
  """
  Returns a FUNCTION that produce the result of given factor * x
  """
  def multiplier(x):
    return x * factor
  return multiplier    # return the inner function

double = create_multiplier(2)
print(double(200))  # Result is a function returned by 'created_multiplier'
print(double(400))
```

### **Functions can be stored in data structures**

Functions can be stored in data structures like lists, dictionaries, or sets, making it possible to manage and manipulate functions dynamically.

```{python}

# Functinos can be stored in data structures

def square(x):
  return x**2

def cube(x):
  return x**3

math_functions = [square, cube]
result = math_functions[1](3)  # access and call the 'cube' function, give 3 to the parameter
print(result)


# Using a list of functinos for cleaning strings from survey data
answer_states = ["   alabama ", "georgia!", "Georgia",  \
          "georgia", "flOrIda", "south   carolina##",   \
          "West virginia?"]
print(answer_states)
          
def remove_punctuation(value):
  return re.sub("[!#?]", "", value)

clean_ops = [str.strip, remove_punctuation, str.title] # 3 functinos in list for cleaning operation

import re

def clean_strings(strings, ops):
    result = []
    for value in strings:
        for func in ops:
            value = func(value)
        result.append(value)
    return result
  
print("strings_cleaned: ", clean_strings(answer_states, clean_ops))

print("-"*55)


# Using map() to apply a function as argument to a sequence
for x in map(remove_punctuation, answer_states):
  print(x)

```

### **Anonymous (Lambda) Functions:**

Anonymous functions, often referred to as "lambda functions," are a concise way to create a single line, inline functions without giving them a formal name. In Python, lambda functions are defined using the **`lambda`** keyword, followed by parameters and an expression. While they are limited in scope compared to regular functions, they offer several benefits:lambda arguments: expression

Structure: ***`lambda`** arguments: expression*

**Conciseness:** Lambda functions are compact and allow you to define simple operations in a single line of code, making them particularly useful for short, one-off functions.

**Readability:** When used appropriately, lambda functions can improve code readability by encapsulating a specific operation right where it's needed, reducing the need for named functions or temporary variables.

**Functional Programming:** Lambda functions are a key component of functional programming in Python. They can be used with higher-order functions like **`map()`**, **`filter()`**, and **`reduce()`** to perform operations on collections of data.

```{python}

# sort a list of tuples by the second element:
data = [(1, 5), (3, 2), (2, 8)]
sorted_data = sorted(data, key=lambda x: x[1])  # extracts the second element (index 1) of each tuple in the data list
print(sorted_data)
```

```{python}

# filter even numbers from a list
numbers = [1, 2, 3, 4, 5, 6]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))  # filtering function, iterables
print(even_numbers)
```

```{python}

# Mapping a Function to a List

values = [1, 2, 3, 4, 5]
squared_values = list(map(lambda x: x**2, values))
print(squared_values)
```

```{python}

def short_function(x):
  return x * 2
print(short_function(100))

equiv_amon = lambda x: x * 2  # assign a function to variable
print(type(equiv_amon))
print(equiv_amon(100))  # produces the same result
print("-"*55)

# use a lambda function for the second argument
def apply_to_list(some_list, f):
  """
  Apply the given function to the given list
  """
  return [f(x) for x in some_list]
ints = [4, 0, 1, 5, 6]

ret = apply_to_list(ints, lambda x: x*2)
print(ret)

# sort the list of strings based on the number of unique charaters for each string.
strings = ["foo", "card", "bar", "aaaa", "abab"]
strings.sort(key=lambda x: len(set(x))) # sort by number of unique characters per string element
print(strings)


```

### Generators

Generators are a powerful and memory-efficient feature in Python for working with sequences of data. They allow you to create iterators on the fly, enabling the processing of large data sets or infinite sequences without storing them in memory. Generators are defined using functions but use the **`yield`** keyword to produce values one at a time. Many objects in Python support iteration, such as over objects in a list or lines in a file. This is accomplished by means of the *iterator protocol*, a generic way to make objects iterable.

**Creating a Generator:**

-   Generators are defined using functions with the **`yield`** keyword.
-   A function with **`yield`** becomes a generator function.

```{python}

# create a simple generator function
def count_up_to(n):
  i = 1
  while i <= n:
    yield i  # yield value and pause execution
    i += 1

print(count_up_to(7))

for num in count_up_to(7):  # iterate generator with for
  print(num)
  

```

**Generator Functions vs. Regular Functions:**

-   Generator functions use **`yield`** to produce values and pause execution.
-   Regular functions use **`return`** to provide a single result and terminate.

**Iterating Over a Generator:**

-   You can iterate over a generator using a **`for`** loop, just like any other iterable.
-   The generator produces values one at a time as you iterate.

**Infinite Sequences:**

-   Generators can be used to create infinite sequences without consuming infinite memory.
-   For example, a generator can produce an infinite stream of numbers.

```{python}

# create a generator of infinite sequences

def infinite_evens():
  num = 0
  while True:
    yield num
    num +=2

# Using next() with a generator    
infinite_evens_generator = infinite_evens()
print(next(infinite_evens_generator))  # the first element yielded by generator
print(next(infinite_evens_generator))
print(next(infinite_evens_generator))
print("-"*55)

# Using for with condition with a generator
for num in infinite_evens_generator:
  if num > 10:
    break
  print("Gen yielded: ", num)
print("-"*55)
  
# Using next() with a stopping condition
try:
  seq_list = []
  while True:
    num = next(infinite_evens_generator)
    if num > 100:
      break
    seq_list.append(num)
except StropIteration:
  pass

print("Sequence from Gen: ", seq_list)
print("-"*55)
```

```{python}

# Both produces the same results

some_dict = {"a": 1, "b": 2, "c": 3}
for key in some_dict:
  print(key)

dict_iterator = iter(some_dict)  # get iterator for the given iterable object
print(dict_iterator)
for item in dict_iterator:
  print(item)

```

```{python}

# working with an iterator
 
some_dict = {"a": 1, "b": 2, "c": 3}
dict_iterator = iter(some_dict)
print(dict_iterator)
print(type(dict_iterator))
print("List created from an iterator: ", list(dict_iterator))
print("-----------------------------------------------------")

# create a generator producing squares from 1 to (n**2)
def squares(n=10):
  print(f"Generator producing squares from 1 to {n**2}")
  for i in range(1, n+1):
    yield i**2
  
gen = squares()
print(gen)  # when called, generator itself does not execute any code

for x in gen: # actual code execution through iteration, One at a time, Not all at once
  print(x, end=" ")
```

Generator express: **Parentheses** instead of brackets in comprehensions - list, set, dictionary, instead of list comprehension style.

```{python}

# generator expression, one-liner, less verbose than generator function definition
gen = (x**2 for x in range(100))
print(gen)

# generator expression as function argument
print(sum(x**2 for x in range(100))) # argument for sum() function
print( dict((i, i ** 2) for i in range(5)) )
```

`itertools` module (standard library), collection of generators for common data algorithms.

**`itertools.groupby(iterable, key=None)`**

This is a function from the itertools module in Python. It's used for grouping elements from an iterable into consecutive keys that share a common characteristic, as determined by a key function. The elements in the iterable are expected to be sorted based on the same key function for groupby() to work effectively.

**iterable**: This is the iterable (e.g., a list, tuple, or iterator) containing the elements you want to group.

**key**: This is an optional argument that specifies a function to extract a key from each element in the iterable. The elements in the iterable are grouped by the values returned by this key function.

The function returns an **iterator** that produces **pairs of a key and an iterator** over the elements in the group.

```{python}

import itertools

words = ["apple", "banana", "bat", "cat", "dog", "elephant"]

# Sort the words by their first letter
sorted_words = sorted(words, key=lambda x: x[0])
print(sorted_words)

# Use groupby to group words by their first letter (consecutive words with same first letter)
groups = itertools.groupby(sorted_words, key=lambda x: x[0])
print(groups)

# iterate through the groups and print each group, very useful dealing with sorted data
for key, group in groups:
  print(f"Words starting with '{key}': {list(group)}") #list() required to convert generator
```

**`itertools.chain(*iterables)`**:

Generates a sequence by chaining iterators together. Once elements from the first iterator are exhausted, elements form the next iterator are returned, and so on.

```{python}


# chain multiple iterators for continuous iteration
from itertools import chain

# Three lists
list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
list3 = [10, 20, 30]

# chain them into a single iterable
combined = chain(list1, list2, list3)
print(combined, type(combined))

# continuous iteration
for item in combined:
  print(item, end=" ")
```

**itertools.combinations(iterable, k)**:

It generates all possible combinations of 'k' number of elements from an iterable. Each combination is a tuple, and the function returns an iterator. It is very useful when exploring various subsets or combinations of elements from a collection. It generate only unique combination regardless of order of the elements.

```{python}

from itertools import combinations

# generate all possible combinations of 2 elements from a given list

elements = [1, 2, 3, 4]
combos = combinations(elements, 2)

# iterate the generator
for combo in combos:
  print(combo)
  # or do something else, more...

```

**itertools.permutations(iterable, k)**:

It generates all possible combinations of 'k' number of elements from an iterable. The order of elements in a permuation matters, so different orders are considered distinct. It cna produce more output than 'combinations()' when 'k' is less than the lenght of the iterable since it considers all possible arrangements. The result is an iterator of tuples, each representing a unique permutation of the elements.

```{python}

from itertools import permutations

elements = [1, 2, 3, 4]
perms = permutations(elements, 2)
for perm in perms:
  print(perm)
```

**`itertools.product(*iterables, repeat=1)`**:

The function is used to generate the Cartesian product of multiple input iterables . The Cartesian product is a set of all possible combinations of elements from the input iterables, where each combination consists of one element from each input iterable.

```{python}

# Cartesian product of iterables
from itertools import product

iterable1 = [1, 2]
iterable2 = ['a','b']

# Generate the Cartesian product of the two iterables
result = product(iterable1, iterable2)

# Iterate through the product and print the combinations
for combo in result:
  print(combo)
print("------------------------")

# set number of times to rpeat the each input iterable
result = product(iterable1, iterable2, repeat=2) # repeating 2 times
for combo in result:
  print(combo)
```

### **Errors and Exception Handling**

This is an important part of building robust programs. In data applications, many functions work only on certain kinds of input.

```{python}

# function throwing error
print(float("1.2345"))  # convert proper string input to float value
# print(float("1,2345"))  # throwing error with improper input
```

```{python}

# Failing gracefully
def attempt_float(x):
  try:
    return float(x)
  except:
    return x  # return input value gracefully(?) when 'try' failed, exception raised

print(attempt_float("1,2345"))

```

```{python}

# suppressing a specific error
def attempt_float(x):
  try:
    return float(x)
  except ValueError:
    return x

# attempt_float((1, 2))  # this caused an error other than ValueError
```

```{python}

# suppressing multiple errors
def attempt_float(x):
  try:
    return float(x)
  except (TypeError, ValueError):  # now added TypeError to supress it too.
    return x

attempt_float((1, 2)) # failed, and gracefully return the input value as defined in try-execept, errors suppressed.

```

```{python}

# 'finally' lets you execute some codes regardless the success of try-block.

f = open("./try-finally.txt", mode="w")
try:
  write_to_file(f)
except:
  print("Failed")
else:
  print("Succeeded")
finally:
  f.close()
```

## Files and the Operating System

Working with files and the operating system is a fundamental aspect of programming in Python. Python provides powerful tools and libraries to manipulate files, read and write data, and interact with the underlying file system

### File handling basics:

```{python}

# writing to a text file
with open('file_test.txt', 'w') as file:
  file.write("Hello, world!")
  file.write("Brown fox jumped over the fence.")
  file.write("Handling file with text in Python is very straight forward.")
```

```{python}
# opening and reading a text file
with open('file_test.txt', 'r') as file:
  content = file.read()
print(content)
```

```{python}
# appending to a text file
with open('file_test.txt', 'a') as file:
  file.write('\nAppended line 1')
  file.write('\nAppended line 2')
  file.write('\nAppended line 3')
  file.write('\nAppended line 4')
  
with open('file_test.txt', 'r') as file:
  content = file.read()
print(content)
```

### File Navigation and Operations:

```{python}

# Listing files in a directory

import os

files = os.listdir('../') # files in upper directory
print(files)
```

```{python}

import os

path = "examples/segismundo.txt"

# open file with given encoding, "r" mode by default
f = open(path, encoding="utf-8") # default Unicode encoding is platform-specific

# iterate the file object and print line with EOL marker intact
for line in f:
  print(line)

# close the file
f.close()
```

```{python}

import os

path = "examples/segismundo.txt"

# EOL-free list of lines in a file
with open(path, encoding="utf-8") as f:
  lines = [x.rstrip() for x in f]
print(lines)
```

```{python}

# read, seek and tell

# read moves the file object position by the number of bytes read after reading character or bytes
f1 = open(path)
print(f1.read(10)) # read 10 characters with the encoding used for this file operation

f2 = open(path, mode="rb")  # open with binary mode
print(f2.read(10)) # read 10 bytes

# tell current file object position
print(f1.tell())
print(f2.tell())

import sys
print(sys.getdefaultencoding())  # this is the default encoding of the platform in use.

# seek changes the file position to the indicated byte in the file

print(f1.seek(3))
print(f1.read(1))
print(f1.tell())

print(f2.seek(3))
print(f2.read(1))
print(f2.tell())

# close the files
f1.close()
f2.close()
```

```{python}

import os

print(os.getcwd())

path = "examples/segismundo.txt"
print(path)

# create a new file from path, remove blank lines

with open("examples/tmp.txt", mode="w") as handle:
  handle.writelines(x for x in open(path) if len(x) > 1)

```

```{python}

# Open the new file and read
with open("examples/tmp.txt") as f:
  lines = f.readlines()

lines
```

### Bytes and Unicode with Files

```{python}

path = "examples/segismundo.txt"

# default file behavior - text mode
with open(path) as f:
  chars = f.read(10) # read eough bytes to decode 10 characters, if utf-8 in use by the platform

print(chars)
print(len(chars))

# binary mode
with open(path, mode="rb") as f:  # append b to the mode
  data = f.read(10) # read exact 10 bytes
print(data)

# try and decode the bytes to a string object
print(data.decode("utf-8")) # works only if each of the encoded Unicode characters is fully formed
# print(data[:4].decode("utf-8")) # error - not fully formed
print(data[:5].decode("utf-8")) # worked, fully formed by the given range

```

```{python}

# Use encoding option with open() to covert Unicode encoding to another

# Create a new file converting encoding of segismundo.txt to iso-8859-1

path = "examples/segismundo.txt"
sink_path = "examples/sink.txt"
with open(path) as source:
  with open(sink_path, "w", encoding="iso-8859-1") as target:
    target.write(source.read())

with open(sink_path, encoding="iso-8859-1") as f:
  print(f.read(10))
```
