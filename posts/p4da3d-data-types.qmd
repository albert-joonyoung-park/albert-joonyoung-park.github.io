---
title: "[3] Built-In Data Structures, Functions, and Files"
subtitle: "A series of posts, exploring data analysis using the book - Python for Data Analysis, 3E by Wes McKinney"
date: '2023-09-11'
categories: ['Python', 'Data Structure']
description: "Learning notes - Python for Data Analysis, 3E - Wes McKinney"
image: data.jpg
format:
  html:
    code-fold: false
jupyter: python3
---

# Chapter 3: Built-In Data Structures, Functions, and Files

## Data Structures and Sequences

### Tuple

Python Tuples: Immutable, ordered collections that allow you to store a sequence of elements. Tuples are defined using parentheses and can hold a mix of data types. They offer efficient data storage, are iterable, and can be used as keys in dictionaries. In this blog, we'll explore the versatility of Python tuples and how to leverage them for various data analysis tasks.

```{python}

# create some tuples
tup = (4, 5, 6)
tup2 = 7, 8, 9
print(tup)
print(tup2)
t = (tup, tup2)    # tuple of tuples
print(t)
type(t)

# convert any sequence or iterator to tuple
print(tuple(['a', 'b', 'c']))
print(tuple('Some String'))

# access elements
nested_tup = ((4,5,6), (7,8))
print(nested_tup[1])
```

Tuple itself is immutable; however, if an object inside a tuple is mutable, you can modify it in place.

```{python}
tup = tuple(['The bown ','fox ', 'jumped over the ',['fence.']])
print(tup)
# tup[1] = 'wolf'           # error
tup[3][0] = 'window '     # ok
print(tup)
tup[3].append('fence')    # ok
print(tup)

```

Concatenation, Variable swap, Unpacking

```{python}

# concatenation using +
tup = (4, None, 'foo') + (6, 0) + ('bar',)
print(tup)

# Swap
a, b = 1, 2
print(a, b)
b, a = a, b
print(a, b)

# Unpacking by iterating over sequences of tuples, lists
seq = [('a1', 'a2', 'a3'),('b4', 'b5', 'b6'), ('c7', 'c8', 'c9')]
print(seq, type(seq))
for a, b, c in seq:
  print(f'a={a}, b={b}, c={c}')
  
# unpacking using assignment, not concerning some trailing values
values = 1, 2, 3, 4, 5, 6, 7
a, b, *_ = values     # *rest works the same as *_
print (a, b, *_)

# method .count()
a = (1, 2, 2, 2, 3, 4, 2)
print(a.count(2))     # number of occurences


```

### List 

Python Lists: Ordered, mutable collections that allow you to store and manipulate sequences of items. Lists are versatile and can hold various data types. They support methods for adding, removing, and modifying elements, making them a fundamental data structure for data analysis and manipulation in Python.

```{python}

# create, convert lists
a_list = [2, 3, 7, None]
tup = ("foo", "bar", "baz")
b_list = list(tup)
print(b_list, type(b_list))

# Access, modify list element
b_list[1] = "peekaboo"
print(b_list)

# Materialize an iterator / generator
gen = range(20) # generator, not materialized yet.
print(gen) 
list(gen) # materialize the generator to list

# Work with the elements
b_list.append("dwarf")     # add to the end of list
b_list.append("foo")
print(b_list)
b_list.insert(1, "RED")     # insert at specific location, consider using collections.deque for efficiency
print(b_list)
b_list.remove("foo")        # remove the first occurence only
print(b_list)

# Check if element in the list
print("dwarf" in b_list)
print("dwarf" not in b_list)


```

```{python}

# Concatenate and combine lists
new_list = [4, None, "foo"] + [7, 8, (2, 3)]
print(new_list)
print(b_list)
new_list.extend(b_list)
print(new_list)

# Sorting in place
a = ["saw", "small", "He", "foxes", "six"]
a.sort() # default
print(a)
a.sort(key=len) # sort by key with given function, by the length of each element
print(a)

# Sorted copy
a = ["saw", "small", "He", "foxes", "six"]
sorted_copy = sorted(a)
print(sorted_copy)


```

```{python}

# Slices

seq = [7, 2, 3, 7, 5, 6, 0, 1]
print(seq)
print(seq[1:5])   # index:1 - index: 4
print(seq[:5])    # index:beginning - index: 4
print(seq[5:])    # index:5 - index:last
print(seq[-4:])   # Indexing from the last, index:-4 to the end
print(seq[-6:-2]) # Indexing from the last, index: -6 to index: -2

print("-"*30)

# Stepping the list
print(seq[::2])     # Extract index 0, 2, 4, 6 ....
print(seq[::3])     # Extract index 0, 3, 6 ....
print(seq[::-2])    # Extract index -1, -3, -5 .....
print(seq[::-1])    # Extract index -1, -2, -3, -4 ... effectively reverse the list or tuple


print("-"*30)

# Slices replacement
seq[3:5] = ['A','B']
print(seq)

```

### Dictionary

Python Dictionaries: Versatile and dynamic data structures that store key-value pairs, allowing for efficient data retrieval and manipulation. Dictionaries are unordered collections that provide a way to map unique keys to associated values, making them invaluable for tasks like data storage, lookup tables, and configuration settings

```{python}

# Create, access and manipulate a Dictionary (aka, hash-map, associative arrays)

```
