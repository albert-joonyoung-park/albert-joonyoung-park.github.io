---
title: "[4] Arrays and Vectorized Computation"
subtitle: "A series of posts, exploring data analysis using the book - Python for Data Analysis, 3E by Wes McKinney"
date: '2023-09-21'
categories: ['Python', 'NumPy']
description: "Learning notes - Python for Data Analysis, 3E - Wes McKinney"
image: data.jpg
format:
  html:
    code-fold: false
jupyter: python3
---

------------------------------------------------------------------------

**NumPy** is a fundamental Python library for numerical and scientific computing. It provides support for working with large, multi-dimensional arrays and matrices, along with a vast collection of mathematical functions to operate on these arrays. Here's a must-know summary of NumPy:

-   **Multi-dimensional Arrays:** NumPy's core feature is its **`ndarray`** (n-dimensional array) data structure. It allows you to represent and manipulate data in multiple dimensions (1D, 2D, or higher), making it ideal for scientific and mathematical computations.

-   **Efficient Data Storage:** NumPy arrays are memory-efficient and provide a contiguous block of memory for data storage. This enables fast and efficient numerical operations and makes NumPy an essential tool for handling large datasets.

-   **Element-Wise Operations:** NumPy supports element-wise operations, which means you can perform operations on entire arrays or slices of arrays without the need for explicit loops. This feature greatly simplifies and speeds up mathematical and scientific computations.

-   **Broadcasting:** NumPy allows for broadcasting, which is a powerful mechanism for performing operations on arrays with different shapes. It automatically expands smaller arrays to match the shape of larger arrays, making computations more flexible.

-   **Mathematical Functions:** NumPy provides a wide range of mathematical functions, including basic arithmetic, linear algebra, Fourier analysis, statistical, and more. These functions are optimized for performance and accuracy.

-   **Random Number Generation:** NumPy includes a random module (**`np.random`**) for generating random numbers and random arrays, which is useful for simulations and statistical analysis.

-   **Integration with SciPy:** NumPy is closely integrated with SciPy, another Python library for scientific computing. SciPy builds on NumPy and provides additional functionality for optimization, signal processing, statistics, and more.

-   **Data Input and Output:** NumPy offers functions for reading and writing data to and from files in various formats, including text files, binary files, and NumPy's own binary format.

-   **Interoperability:** NumPy seamlessly interoperates with other libraries and data analysis tools in the Python ecosystem, such as pandas, Matplotlib, and scikit-learn. This makes it a key component in data science workflows.

-   **Open Source and Community:** NumPy is open-source software and enjoys a large and active community of contributors and users. It is continually updated and improved, ensuring its relevance in the rapidly evolving field of data science and numerical computing.

-   **Cross-Platform:** NumPy is cross-platform and can be used on various operating systems, including Windows, macOS, and Linux.

NumPy is the foundation of many scientific and data science libraries in Python and is an essential tool for tasks such as data manipulation, statistical analysis, machine learning, and more. Its ease of use and performance make it a go-to choice for researchers, scientists, engineers, and data analysts working with numerical data in Python.

```{r}
library(tidyverse)
Sys.setenv(RETICULATE_PYTHON = "C:\\Users\\Joon\\anaconda3\\envs\\pydata-book/python.exe")
RETICULATE_PYTHON="C:\\Users\\Joon\\anaconda3\\envs\\pydata-book/python.exe"
library(reticulate)
```

```{r}
conda_list()

```

```{r}
use_condaenv("pydata-book", required=TRUE)
```

```{r}
py_config()
```

Idea of performance difference

```{python}

# NumPy array of one-million integers vs Python list

import numpy as np
import timeit

my_arr = np.arange(1_000_000)
my_list = list(range(1_000_000))

```

```{python}

# time it
execution_time = timeit.timeit(lambda: my_arr * 2, number=10)
print(f"np array multiplication: {execution_time}")

execution_time = timeit.timeit(lambda: [ x*2 for x in my_list * 2 ], number=10)
print(f"Python list element multiplication: {execution_time}")

```

------------------------------------------------------------------------

## The NumPy ndarray: A Multidimensional Array Object

Batch computation

```{python}

import numpy as np

data = np.array([
  [1.5, -0.1, 3], 
  [0, -3, 6.5],
  [2, 7, 9.9],
  [23, 9, 21]
])
print("data: ", data)

# math operations with the ndarray
print("data * 10: ", data * 10)
print("data + data: ", data + data)
```

```{python}

# shape and type
print(data.shape)  # tuple 4R x 3C
print(data.dtype)  # ndarray is for homogeneous data
```

#### Creating ndarrays

```{python}

# ndarray creation

# np.array()
data1 = [6, 7.5, 8, 0, 1] # any sequence-like object
arr1 = np.array(data1)
print(arr1)

data2 = [[1, 2, 3, 4], [5, 6, 7, 8]] # list of equal length array
arr2 = np.array(data2)
print(arr2)
print(arr2.shape)
print(arr2.dtype)

# np.zeros() / np.empty()
print(np.zeros(10))
print(np.zeros((3, 6)))
print(np.zeros((2, 3, 5)))
print(np.empty(((2, 3, 2)))) # uninitialized meory with garbage data

# np.arange()
print(np.arange(15))
```

[Some important NumPy array creation functions from Python for Data Analysis 3E by Wes Mckinney](https://wesmckinney.com/book/numpy-basics#numpy_ndarrays "Some important NumPy array creation functions")

#### Data types for ndarrays - `dtype`

```{python}

# dtype
arr1 = np.array([1, 2, 3], dtype=np.float64)
arr2 = np.array([1, 2, 3], dtype=np.int32)
print(arr1, arr1.dtype)
print(arr2, arr2.dtype)
```

```{python}

# type casting - astype()
arr_float = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])
print(arr_float)
arr_int = arr_float.astype(np.int32)  # decimal truncated
print(arr_int)
numeric_strings = np.array(["1.25", "-9.6", "42"], dtype=np.string_)
print(numeric_strings)
numeric_from_strings = numeric_strings.astype(float) # ValueError when fails
print(numeric_from_strings)
# conver to the other array's type
int_array = np.arange(10)
calibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)
print(int_array.astype(calibers.dtype))


```

#### Arithmetic with NumPy Arrays

```{python}

# arrays in shame shape
print("\nArrays in shame shape\n")
arr = np.array([[1., 2., 3.], [4., 5., 6.]])
print(arr)
print(arr * arr) # element-wise multiplication
# print(arr * [10, 200]) # broadcast error, not in same shape
print(arr - arr) # element-wies subraction

# array with salar
print("\nArray with salar\n")
print(1 / arr) # applied with each element
print(arr ** 2)  

# array comparison
print("\nArray comparison\n")
arr2 = np.array([[0., 4., 1.], [7., 2., 12.]])
print(arr2)
arr_bool = arr < arr2  # element-wise boolean evaluation
print(arr_bool)
if arr_bool.all():
  print("Two arrays are same.") 
else:
  print("Two arrays are different.")
```

#### Basic Indexing and Slicing

```{python}

# Similar to Python lists
print("\nSimilar to Python lists...\n")
arr = np.arange(10)
print(arr)
print(arr[5]) # element accessing
print(arr[5:8]) # slicing
arr[5:8] = 99 # assignment changes broadcasts the new valjue, relfected to the original array - value propagation / broadcast
print(arr)
arr_slice = arr[5:8] # check broadcasted value
print(arr_slice)
arr_slice[1] = 12345 # value propagation to the original
print(arr)

# Assignment to all values - bare slice [:]
print("\nAssignment to all values - bare slice [:]...\n")
arr_slice[:] = 64
print(arr)  # value propagation to the original 

# 2d array, each index of 1-d array, not scalar
print("\n2d array, each index of 1-d array, not scalar...\n")
arr2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arr2d)
print(arr2d[2], type(arr2d[2]))
print(arr2d[0][2]) # accessing individual element

# Axis in 2-d array
print("\narr(r, c) - Axis0 (row), Axis1 (col) in 2-d array...\n")
print(arr2d[0, 2]) # same as above

```

```{python}

# 3-d -> 2-d -> 1-d 
arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print("arr3d: ", arr3d)
print(arr3d.shape)
print(arr3d[0]) # arr3d[0] 2x3 array, first row
old_values = arr3d[0].copy() # save to variable
print(old_values)
arr3d[0] = 99 # change with scalar, broadcasting to the whole 2x3
print(arr3d)
arr3d[0] = old_values # change with array
print(arr3d)
print("arr3d[1, 0]: ", arr3d[1, 0])
```

```{python}

# Indexing with slices

print("arr: ", arr)
print("arr[1:6]: ", arr[1:6]) # 1-d array
print("arr2d: ", arr2d)
print("arr2d[:2]: ", arr2d[:2]) # 2-d array, slicing rows
print("arr2d[:2, 1:]: ",arr2d[:2, 1:] ) # 2-d array, slicing rows and columns

# select the second row, and first two cols.
lower_dim_slice = arr2d[1, :2]  # slicing 1-d array
print(lower_dim_slice)
print(lower_dim_slice.shape)

# select the third col, and first two rows
print(arr2d[:2, 2])
print(arr)

# select all rows and the first col.
print(arr2d[:, :1])
```

#### Boolean Indexing

```{python}

# Boolean indexing

names = np.array(["Bob", "Joe", "Will", "Bob", "Will", "Joe", "Joe"])
data = np.array([[4, 7], [0, 2], [-5, 6], [0, 0], [1, 2], [-12, -4], [3, 4]])
print(names, names.shape)
print(data, data.shape)

# Suppose each name corresponds to a row in the data array

# row filtering using Boolean indexing, compare names with the string 'Bob' to filter the corresponding rows from data array
print(names == "Bob")  # output - array of comparison result for each element

print(data[names == "Bob"]) # filter the corresponding rows from data, where "Bob" was matched in names.
print(data[names == "Bob", :1]) # also slice the column(s) to select the first col.
print(data[names == "Bob", 1]) # reduced to 1-d

# negating the conditon
print("\n__Negating the condition__")
print("names: ", names)
print(names == "Bob")
print(names != "Bob")
print(~(names == "Bob")) # same as !=

# Filter rows in data with the same row index where Bob is not matched in names
print(data[~(names == "Bob")])

# Use a reference variable to invert Boolean condition
cond = names == "Bob"
print(cond)
print(data[~cond])  # same as data[~(names == "Bob")]

# Multiple Boolean conditions - &, |
cond = (names == "Bob") | (names == "Will")
print(cond)
print(data[cond])

```

```{python}

# 
print("\n___Setting values with Boolean arrays___\n")
print(data)
print(data < 0)
data[data < 0] = 999  # value setting applies to element with True
print(data)
```

```{python}

#
cond = (names != "Joe") # Save the boolean array to a variable
print(cond) 
data[cond] = 7 # set the all element in the filtered rows
print(data)
```

#### Fancy Indexing

Describe indexing using array of integers

```{python}

# Create an array of 5,4 filled initialized with zero
arr = np.zeros((8, 4))

for i in range(8):
  arr[i] = i # fill each row with row index number
print(arr, "\n")

# select rows in custom order - pass an array of row index in customer order
print(arr[ [4, 3, 0, 6]], "\n")
print(arr[ [-3, -5, -7] ], "\n")

# passing multiple index arrays - select using each tuple of indices
arr = np.arange(32).reshape((8, 4))
print(arr, "\n")
print(arr[[1, 5, 7, 2], [0, 3, 1, 2]], "\n") # indexing using (1,0) (5,3) (7,1) (2,2)

# retangular shaping and subsetting
print(arr.shape)
print(arr[[1, 5, 7, 2]][:, [0, 3, 1, 2]], "\n") # rows subsetted in custom order, then cols subsetted in custom order

# value assignment using fancy indexing
print(arr[[1, 5, 7, 2], [0, 3, 1, 2]])
arr[[1, 5, 7, 2], [0, 3, 1, 2]] = 777  # changes the indexed value
print(arr)

```

#### Transposing Arrays and Swapping Axes

```{python}

# T attribute
print("\nT attribute in array to transpose...\n")
arr = np.arange(15).reshape(3, 5)
print(arr)
print(arr.T)

# inner matrix product using T
print("\ninner matrix product using T...\n")
arr = np.array([[0, 1, 0], [1, 2, -2], [6, 3, 2], [-1, 0, -1], [1, 0, 1
]])
print(arr)
print(arr.T)
print(np.dot(arr.T, arr)) # matrix dot product
print(arr.T @ arr) # same as above

print("\ndarray.swapaxes, same effect of transposing...\n")
print(arr)
print(arr.swapaxes(0, 1))
print(arr.T == arr.swapaxes(0,1))

```

## Pseudorandom Number Generation

The `numpy.random` module supplements the built-in Python random module with functions for efficiently generating whole arrays of sample value from many kinds of probability distributions.

```{python}

# Generates 4x4 random numbers from a standard normal distribution (mean = 0, standard deviation = 1)

samples = np.random.standard_normal(size=(4, 4))
print(samples)
```

```{python}
# Set to use explicit generator using seed
rng = np.random.default_rng(seed=12345)
data = rng.standard_normal((2, 3))
print(data)
data2 = rng.standard_normal((2, 3))
print(data2)
data3 = rng.standard_normal((2, 3))
print(data3)
print(type(rng))
```

`numpy.random._generator.Generator` class

**permutation**: Returns a random permutation of a sequences - list, array, shuffles the elements

```{python}

import numpy as np

# Some array
arr = np.array([1, 2, 3, 4, 5])
# Generate a random permutation of the array
permuted_arr = np.random.permutation(arr)
print(permuted_arr)
```

**shuffles**: Shuffles elements by modifying the original in place

```{python}

# some array
arr = np.array([1, 2, 3, 4, 5])
# shuffle the array in place
np.random.shuffle(arr)
print(arr)
np.random.shuffle(arr)
print(arr)
np.random.shuffle(arr)
print(arr)
```

**uniform**: [*Equal Probability Occuring*]{.underline}, Generate random numbers from a uniform distriubution within a specified range.

```{python}

# generate random numbers in uniform between 0 and 1

import numpy as np

random_nums = np.random.uniform(0, 1, size=7)
print(random_nums)
```

**randint**: Generate random integers within a specified range

```{python}

# Generate random integers within a specified range.
import numpy as np
random_ints = np.random.randint(1, 11, size=7)
print(random_ints)
```

**standard_normal**: Generate random numbers from a standard normal distribution (mean=0, standard deviation=1)

```{python}

# generate random numbers from a standard normal distribution

import numpy as np

random_nums = np.random.standard_normal(size=7)
print(random_nums)
print(np.mean(random_nums))  # close to 0
print(np.std(random_nums))  # close to 1

```

**binomial**: Generates random numbers from a binomial distribution (two possible outcomes, success or failure - Bernoulli trials)

```{python}

import numpy as np

# Generate random numbers from a binomial distribution
random_nums = np.random.binomial(n=10, p=0.5, size=5)
print(random_nums)

# interpretation of the result
"""
The code generates 5 random numbers, each representing the number of successful outcomes in 10 independent trials where each trial has a 50% chance of success.

The possible values for each of these random numbers range from 0 to 10 because you can have 0 to 10 successful outcomes in 10 trials.

The specific numbers you obtained, [7, 5, 8, 3, 7], represent the results of 5 separate random experiments. For example, in the first experiment, you got 7 successful outcomes out of 10 trials, and in the second experiment, you got 5 successful outcomes, and so on.

The result will vary each time you run the code because it's based on random sampling, but the numbers are generated according to a binomial distribution with the specified parameters (10 trials with a 50% chance of success on each trial).
"""
```

**normal**: Generates random numbers from a normal distribution with specified mean and standard deviation.

```{python}

import numpy as np

# Generate random numbers from a normal distribution
random_nums = np.random.normal(loc=0, scale=1, size=100)  # loc: mean(center peak),scale: standard deviation, size: number of random numbers to generate

print(random_nums)
```

```{python}

# draw s simple plot with the array
import matplotlib.pyplot as plt

plt.clf() # clear any previous figure with plt.

# histogram plot
plt.hist(random_nums, bins=50, density=True, alpha=0.7, color='red', edgecolor='black')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of Random Numbers from Standard Normal Distribution')
plt.show()


```

```{python}

# KDE (Kernel Density Estimate)

import seaborn as sns
import matplotlib.pyplot as plt

plt.clf() # clear any previous figure with plt.

sns.kdeplot(random_nums, color='green', fill=True)
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('KDE Plot of Random Numbers from Standard Normal Distribution')
plt.show()


```

```{python}

import matplotlib.pyplot as plt

plt.clf() # clear any previous figure with plt.

# Create a box plot
plt.boxplot(random_nums)

# Add labels and title
plt.xlabel('Value')
plt.ylabel('Distribution')
plt.title('Box Plot of Random Numbers from Standard Normal Distribution')

# Show the plot
plt.show()
```

```{python}

# ECDF Plot (Empirical Cumulative Distribution Function): how the data accumulates moving along the x-axis, representing the cumulative distribution

plt.clf() # clear any previous figure with plt.

import numpy as np
import matplotlib.pyplot as plt

# Create an ECDF plot
sorted_nums = np.sort(random_nums)
print(len(sorted_nums))
y = np.arange(1, len(sorted_nums) + 1) / len(sorted_nums)
plt.plot(sorted_nums, y, marker='.', linestyle='none')

# Add labels and title
plt.xlabel('Value')
plt.ylabel('ECDF')
plt.title('ECDF Plot of Random Numbers from Standard Normal Distribution')

# Show the plot
plt.grid(True)
plt.show()

```

**beta**: Generates random numbers from a beta distribution.

```{python}

import numpy as np

# Generate random numbers from a beta distribution
random_nums = np.random.beta(a=2, b=5, size=5)
print(random_nums)
```

**chisquare**: Generates random numbers from a chi-squared distribution

```{python}

import numpy as np

# Generate random numbers from a chi-squared distribution
random_nums = np.random.chisquare(df=3, size=5)
print(random_nums)
```

**gamma**: Generates random numbers from a gamma distribution

```{python}

import numpy as np

# Generate random numbers from a gamma distribution
random_nums = np.random.gamma(shape=2, scale=2, size=5)
print(random_nums)
```

## Universal Functions: Fast Element-Wise Array Functions

ufunc, a function taht performs element-wise operatinos on data in ndarrays

```{python}


# unary ufunc

arr = np.arange(10)
print(arr, type(arr))
print(np.sqrt(arr))  # sqrt on each element
print(np.exp(arr))   # exp on each element
print("-"*60)

# binary ufunc
x = rng.standard_normal(8)
y = rng.standard_normal(8)
print(x)
print(y)
print(np.maximum(x, y))  # element-wise maximum from x, y

arr = rng.standard_normal(7) * 5
print(arr)
fractional_part, integral_part = np.modf(arr)  # returning two arrays
print(fractional_part)
print(integral_part) 


```

[Universal functions(ufunc)](https://numpy.org/doc/stable/reference/ufuncs.html "Universal functions")

## Array-Oriented Programming with Arrays

Evaluate a function using with an array, not for loop

**numpy.meshgrid()**

```{python}

# mumpy.meshgrid

points = np.arange(-5, 5, 0.01)
#print(points)
print(points.size) # array size
xs, ys = np.meshgrid(points, points) # create a comple grid for coordinates
#print(xs)
#print(ys)

# evaluate the function
z = np.sqrt(xs**2 + ys**2)
#print("z: ", z)

# create a plot - colorbar
import matplotlib.pyplot as plt

plt.clf() # clear any previous figure

# using imghow() function
plt.imshow(z, cmap=plt.cm.gray, extent=[-5, 5, -5, 5])
plt.colorbar()
plt.title("Image plot of $\sqrt{x^2 + y^2}$ for a grid of values")
plt.show()



```

```{python}

import numpy as np
import matplotlib.pyplot as plt

# Generate the same grid as before
points = np.arange(-5, 5, 0.01)
xs, ys = np.meshgrid(points, points)
z = np.sqrt(xs**2 + ys**2)

# Create a line chart by taking values along a horizontal line (e.g., y=0)
line_values = z[len(points)//2, :]

# Create an array of x-values for the line chart
x_values = points

# Create a line chart
plt.clf()
plt.plot(x_values, line_values, label='Line Chart')
plt.xlabel('X')
plt.ylabel('Function Value')
plt.title('Line Chart of Function Values along y=0')
plt.legend()
plt.grid(True)

# Show the plot
plt.show()
```

### Expressing conditional logicas Array Operations

**`numpy.where`** - vectorized version fo ternary expression `x if condition else y`

## File Input and Output with Arrays

## Linear Algebra

## Example Random Walks
