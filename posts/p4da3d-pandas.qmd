---
title: "[5] Pandas"
subtitle: "A series of posts, exploring data analysis using the book - Python for Data Analysis, 3E by Wes McKinney"
date: '2023-10-11'
categories: ['Python', 'pandas']
description: "Learning notes - Python for Data Analysis, 3E - Wes McKinney"
image: data.jpg
format:
  html:
    code-fold: false
jupyter: python3
---

------------------------------------------------------------------------

**pandas is ....**

Two workhorse data structures: Series and DataFrame, solid foundation of wide variety of data tasks.

Series - one-dimensional array-like object with a sequence of values and index: array + lables

```{python}

# Simple Series
import numpy as np
import pandas as pd

obj = pd.Series([4, 7, -5, 3])
print(obj)
print(type(obj))
print(obj.array)
print(obj.index)

# A Series with a custom index
obj2 = pd.Series([4, 7, -5, 3], index=["d", "b", "a", "c"])
print(obj2)
print(obj2.index)

# Select, modify array elemtns using index
obj2["a"]
obj2["d"] = 6
obj2[["c", "a", "d"]]  # using a list of 'indices'-like

# Preservation of index-value link
print(obj2[obj2 > 0])
print(obj2 * 2)
print(np.exp(obj2))

# Series and dictionary, the shared context: mapping of index value to data value
print("b" in obj2)
print("B" in obj2)

# Convert Python dictionary to/from a Series
data_dict = {
    "name": "John Smith",
    "age": 30,
    "city": "New York",
    "email": "john.smith@email.com",
    "is_student": False
}
print(data_dict)
s_data = pd.Series(data_dict)  # dictionary to Series
print(s_data, type(s_data))
d_data = s_data.to_dict()  # Series to dictionary
print(d_data, type(d_data))

# Preservation of index-value
new_index = ["gender", "name", "age", "city", "email"]
obj4 = pd.Series(data_dict, index=new_index)
print(obj4)

# Detecting missing data using pd and Series
print(pd.isna(obj4))
print(pd.notna(obj4))
print(obj4.isna())
print(obj4.notna())
```

**Q: How to assign a name to a pandas Series and customize its index name?**

```{python}

sdata = {"Ohio": 35000, "Texas": 71000, "Oregon": 16000, "Utah": 5000}
states = ["California", "Ohio", "Oregon", "Texas"]

obj4 = pd.Series(sdata, index=states)
print(obj4)

obj4.name = "population"
obj4.index.name = "state"
print(obj4)
```

Q: Change the index of Series in place

```{python}

# change the index using index attribute
obj.index = ["One", "Two", "Three", "Four"]
print(obj)
```

### DataFrame

Rectangular table of data, ordered, named collection of columns. Each column can be a different value type. It has both a row and column index - A dictionary of Series

**Q. Create a DataFrame from a dictionary of equal-length lists or Numpy arrays**

```{python}

# most common way of creating a DataFrame
data = {"state": ["Ohio", "Ohio", "Ohio", "Nevada", "Nevada", "Nevada"],
        "year": [2000, 2001, 2002, 2001, 2002, 2003],
        "pop": [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}
frame = pd.DataFrame(data)

print(frame)
print(frame.head())
print(frame.tail())
print(frame.columns.array)
print(frame.index.array)

```

**Q: Create a DataFrame in a customized sequence of columns**

```{python}

# create a DataFrame in a custom column order - default is by the order of key value
frame2 = pd.DataFrame(data, columns=["year", "state", "pop", "debt"])
print(frame2)
print(frame2.columns)
```

**Q: Retrieve columns in a DataFrame**

```{python}
# Retrieve columns using [] or dot notation
print(frame2["state"])
print(frame2.state)

```

Q: Retrieve rows using row labels and integer

```{python}

# data source dictionary
data = {'A': [1, 2, 3, 4, 5],
        'B': [6, 7, 8, 9, 10]}

# DataFrame
df = pd.DataFrame(data, index=['row1', 'row2', 'row3', 'row4', 'row5'])
print(df)

# Label-based selection
print(df.loc['row1':'row3'])

# Integer-based selection
print(df.iloc[0:2])


```

**Q: Modify the 'debt' column in the DataFrame with a specific scalar value or an array of values**

```{python}

frame2["debt"] = 16.5
print(frame2)

frame2["debt"] = np.arange(6.)
print(frame2)
```

Q: **Modify the 'debt' column in the DataFrame with a Series object with different number of data**

```{python}

# Series index value is used to match the index of DataFrame, if not presented, it is ignored
val = pd.Series([-1.2, -1.5, -1.7], index=[2, 4, 32])
frame2["debt"] = val
print(frame2)
```

**Q: Create a column called *`eastern`*, and initialize it with Boolean value if the state is *`Ohio`***

```{python}
frame2["eastern"] = (frame2["state"] == "Ohio")
print(frame2)
```

**Q: Delete column *`eastern`* and list all the columns for the DataFrame**

```{python}

del frame2["eastern"]
frame2.columns
```

**Q: Create a DataFrame using a nested dictionary data.**

```{python}
populations = {"Ohio": {2000: 1.5, 2001: 1.7, 2002: 3.6},
               "Nevada": {2001: 2.4, 2002: 2.9}}
print(populations)

# outer dictionary key - column indices
df_populations = pd.DataFrame(populations)
print(df_populations)
```

**Q: Transpose the df_populations DataFrame.**

```{python}
df_populations.T
```

**Q: Create a DataFrame using a nested dictionary data, using new column index**

```{python}
pd.DataFrame(populations, index=[2000, 2001, 2012])
```

Q. Create a DataFrame using frame3, using a dictionary with a few Series of columns with custom range

```{python}

sub_populations = {
    "Ohio2": df_populations["Ohio"][:-1],
    "Nevada2": df_populations["Nevada"][:2]
}
df_sub_populations = pd.DataFrame(sub_populations)
print(df_sub_populations)
```

```{python}
populations
```

**Q: Create a DataFrame using a NumPy 2D-array. Give custom row and column labels**

```{python}

# Create a 2D ndarray as data source
data = np.array([[1, 2, 3,],
                [4, 5, 6],
                [7, 8, 9]])

# Define custom row and column labels
row_labels = ['Row-1', 'Row-2', 'Row-3']
column_labels = ['A', 'B', 'C']

# Create a DataFrame with the custom labels
df = pd.DataFrame(data, index=row_labels, columns=column_labels)
print(df)
```

**Q: Create a DataFrame using a dictionary of arrays, lists or tuples.**

```{python}

# DataFrame from a dictionary

# Create a dictionary with arrays
data_dict = {
    'Name': np.array(['Alice', 'Bob', 'Charlie']),
    'Age': np.array([25, 30, 28]),
    'City': np.array(['Toronto', 'Calgary', 'Ottawa'])
}

# Create a pandas DataFrame
df = pd.DataFrame(data_dict)

print(df)
```

```{python}

# DataFrame from a list

# Create a dictionary with lists
data_dict = {
    'Country': ['USA', 'Canada', 'UK'],
    'Population': [328, 38, 66],
    'Capital': ['Washington D.C.', 'Ottawa', 'London']
}

# Create a pandas DataFrame
df = pd.DataFrame(data_dict)

print(df)
```

```{python}

# Create a dictionary with tuples
data_dict = {
    'Fruit': ('Apple', 'Banana', 'Cherry'),
    'Color': ('Red', 'Yellow', 'Red'),
    'Taste': ('Sweet', 'Sweet', 'Tart')
}

# Create a pandas DataFrame
df = pd.DataFrame(data_dict)

print(df)
```

**Q: Create a DataFrame using a NumPy structured array**

`


# Create a NumPy structured array
# Field + Type: (ID, Name, Age)

data = np.array([(100, 'Alice', 25),
                 (200, 'Bob', 30),
                 (300, 'Charlie', 29)],
                dtype=[('ID', int), ('Name', 'U10'), ('Age', int)])

# Create a DataFrame from the structued array
df = pd.DataFrame(data)
print(df)
```

**Q:** **Create a DataFrame using a dictionary of Series.**

```{python}


# Create a dictioinary of Series
data_dict = {
    'Name': pd.Series(['Alice', 'Bob', 'Charlie']),
    'Age': pd.Series([25, 30, 28]),
    'City': pd.Series(['New York', 'San Francisco', 'Los Angeles', 'Paris'])
}

# Create a pandas DataFrame from the dictioanry of Series
df = pd.DataFrame(data_dict)
print(df)
```

**Q:** **Create a DataFrame using a list of dictionaries / Series.**

`


# Create a list of dictionaries
data_dict = [
    {'Name': 'Alice', 'Age': 25, 'City': 'New York'},
    {'Name': 'Bob', 'Age': 30, 'City': 'San Francisco'},
    {'Name': 'Charlie', 'Age': 28, 'City': 'Los Angeles'}
]

# Create a list of Series
name_series = pd.Series(['Alice', 'Bob', 'Charlie'], name='Name')
age_series = pd.Series([25, 30, 28], name='Age')
city_series = pd.Series(
    ['New York', 'San Francisco', 'Los Angeles'], name='City')

# Create a DataFrame from the list of dictionaries
df1 = pd.DataFrame(data_dict)
print(df1)
print("-" * 50)
# Create a DataFrame from the list of Series
df2 = pd.DataFrame({'Name': name_series,
                    'Age': age_series,
                    'City': city_series})
print(df2)

```

**Q: Create a DataFrame using a list of lists / tuples**

`


# Create a list of lists
data_list = [
    ['Alice', 25, 'New York'],
    ['Bob', 30, 'San Francisco'],
    ['Charlie', 28, 'Los Angeles']
]

# Define column labels
columns = ['Name', 'Age', 'City']

# Create a DataFrame from the list of lists
df = pd.DataFrame(data_list, columns=columns)
print(df)

print("-" * 50)

# Create a list of tuples
data_tuples = [
    ('Alice', 25, 'New York'),
    ('Bob', 30, 'San Francisco'),
    ('Charlie', 28, 'Los Angeles')
]

# Define column labels
columns = ['name', 'age', 'city']

# Create a DataFrame from the list of tuples
df = pd.DataFrame(data_tuples, columns=columns)
print(df)
```

**Q: Create a DataFrame using another DataFrame**

`


# Create the original DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [25, 30, 28],
    'City': ['New York', 'San Francisco', 'Los Angeles']
}

original_df = pd.DataFrame(data)
print(original_df)
print("-" * 50)

# Create a new DataFrame based on the original DataFrame
copy_original_df = original_df.copy()
copy_original_df.columns = ['_name', '_age', '_city']
print(copy_original_df)
print("-" * 50)

new_df = pd.DataFrame(original_df)
print(new_df)
print("-" * 50)

print(id(original_df))
print(id(copy_original_df))
print(id(new_df))
```

**Q: Create a DataFrame and update the name attributes for index and columns**

```{python}

# Data source in a idctionary
populations = {
    "Ohio": {2000: 1.5, 2001: 1.7, 2002: 3.6},
    "Nevada": {2001: 2.4, 2002: 2.9}
}

# Create a DataFrame
frame3 = pd.DataFrame(populations)
print(frame3)
print("-" * 50)

# Update the name attributes for index / columns
frame3.index.name = "year"
frame3.columns.name = "state"
print(frame3)

```

**Q. Create a DataFrame from a dictionary, then convert it to a NumPy array.**

```{python}

# Data source in a dictionary
data = {
    "state": ["Ohio", "Ohio", "Ohio", "Nevada", "Nevada", "Nevada"],
    "year": [2000, 2001, 2002, 2001, 2002, 2003],
    "pop": [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]
}
print(data, type(data))
print("-"*50)

# Create a DataFrame and add a column 'debt'
frame2 = pd.DataFrame(data)
val = pd.Series([-1.2, -1.5, -1.7], index=[2, 4, 5])
frame2["debt"] = val
print(frame2, type(frame2))
print("-"*50)

# Convert DataFrame to NuPy 2d-ndarray
frame2_array = frame2.to_numpy()
print(frame2_array, type(frame2_array))
```

## **Index Objects**

Index objects holds the information about axis labels (labels assigned to rows and columns in DataFrame and Series) and meta data. Index objects are immutable and it makes it safer to share index objects among data structures.

Q: Construct a Series object and retrieve index information from it.

```{python}

# Create a Series
obj = pd.Series(np.arange(3), index=["a", "b", "c"])  # row labels
print(obj, type(obj))
print(obj.index)
print(obj.index[1:])  # slicing the array of index object
```

### Q: Create an Index Object and construct a Series using the object.

```{python}

# Create an Index object
labels = pd.Index(np.arange(3))
print(labels, type(labels))

# Create a Series using the index object
obj2 = pd.Series([1.5, -2.5, 0], index=labels)
print(obj2, type(obj2))

# Test equality of the index object
print(obj2.index is labels)
print(id(obj2.index))
print(id(labels))  # refering to the the same object

```

### Q: Create a DataFrame and use its index and columns to test Set operation for element existence.

```{python}

# Data source in a idctionary
populations = {
    "Ohio": {2000: 1.5, 2001: 1.7, 2002: 3.6},
    "Nevada": {2001: 2.4, 2002: 2.9}
}

# Create a DataFrame
frame3 = pd.DataFrame(populations)
print(frame3)
print("Index: Outer keys become column labels, Inner keys become row labels.")
print("-" * 50)

# Indexes for columns and rows
print(frame3.columns, type(frame3.columns))
print(frame3.index, type(frame3.index))
print("-" * 50)

# Check with set operator
print("Ohio is in index for columns: ", "Ohio" in frame3.columns)
print("2003 is in index for rows: ", "2003" in frame3.index)
```

### Q: Concatenate with additional Index objects, producing a new index

```{python}


# Create an initial index
index1 = pd.Index([1, 2, 3])

# Create a new index to append
index2 = pd.Index([4, 5, 6])

# Use the append() method to concatenate index2 to index1import pandas as pd

# Create two Index objects
index1 = pd.Index([1, 2, 3, 4, 5])
index2 = pd.Index([3, 4, 5, 6, 7])

# Use the difference() method to find the set difference
result = index1.difference(index2)

# Display the elements in index1 that are not in index2
print(result)

new_index = index1.append(index2)

# Display the new concatenated index
print(new_index)

```

### Q: Compute set difference, intersection and union as an index between two index objects

```{python}


# Create two Index objects
index1 = pd.Index([1, 2, 3, 4, 5])
index2 = pd.Index([3, 4, 5, 6, 7])

# Use the difference() method to find the set difference
result = index1.difference(index2)
print(result)

# intersection
result = index1.intersection(index2)
print(result)

# union
result = index1.union(index2)
print(result)
```

### Q: Compute Boolean array indicating whether each value is contained in the passed collection

`


# Create an Index object
index = pd.Index([1, 2, 3, 4, 5])

# Create a collection of values to check for containment
collection = [3, 5, 7]

# Use the isin() method to check for containment
is_in_collection = index.isin(collection)

# Display the Boolean array for each element's containment
print(is_in_collection)

```

### Q: Delete an element at a specific location in an Index and created a new updated Index.

```{python}


# Create an INdex
index = pd.Index(['A', 'B', 'C', 'D'])
print(index)

# Delete an element at a specific position
new_index = index.delete(2)  # elemnt at position 2 (0-based)
print(new_index)
```

### Question: Create a new Index object by deleting passed lables from the index.

```{python}


# Create an Index
index = pd.Index(['A', 'B', 'C', 'D', 'E'])
print("original Index obj: ", index)

# Drop specific labels from the Index
labels_to_drop = ['B', 'C']
new_index = index.drop(labels_to_drop)
print("new Index obj: ", new_index)

```

### Question: Create a new Index object by inserting new labels to an existing Index object, after the element matching with the first letter of the new label

```{python}


# Create a Index object
original_labels = ['A', 'B', 'C', 'D', 'E']
index = pd.Index(original_labels)
print("Original index: ", index)

# additional labels to be inserted
additional_labels = ['C-3', 'C-5', 'C-1', 'C-2', 'C-4']
print("Labels to insert: ", additional_labels)

# insert the labels
new_index = index
additional_labels.sort(reverse=True)
# print("reverse-sorted additional labels: ", additional_labels)

for label in additional_labels:
    first_letter = label[:1]

    if (first_letter in original_labels):
        # find the index of the first letter
        idx = original_labels.index(first_letter)
        # print(first_letter, label, idx)
        new_index = new_index.insert(idx+1, label)

print("New index: ", new_index)


```

### Question: You have a Pandas Index object, and you want to check if it is monotonically decreasing. Write a Python function that takes an Index object as input and returns **`True`** if the index is monotonically decreasing, and **`False`** otherwise.

```{python}


# Function to check if an Index is monotonically  decreasing

def is_monotonic_decreasing(index):
    return index.is_monotonic_decreasing


# indexes to test
index1 = pd.Index([5, 4, 3, 2, 1])
index2 = pd.Index(['E', 'D', 'C', 'B', 'A'])
index3 = pd.Index([4, 3, 2, 'D', 'C', 'B'])

list_of_index = [index1, index2, index3]
for index in list_of_index:
    print(index, is_monotonic_decreasing(index))

```

### Question: You have a Pandas Index object, and you want to check if it contains unique elements. Write a Python function that takes an Index object as input and returns `True` if all the elements are unique, and `False` otherwise.

```{python}


# Create indexes for testing
index1 = pd.Index(['A', 'B', 'C', 'D', 'E'])
index2 = pd.Index(['A', 'B', 'C', 'A', 'D'])

# Function to check if an Index contatins unique elements


def is_unique(index):
    return index.is_unique


# Test the indexes
print(index1, is_unique(index1))
print(index2, is_unique(index2))
```

### You have a Pandas Index object, and you want to retrieve the unique elements from it. Write a Python function that takes an Index object as input and returns a list of unique elements from the index.

```{python}


index = pd.Index(['A', 'B', 'C', 'A', 'D', 'B'])


def get_unique_elements(index):
    return index.unique()


unique_elements = get_unique_elements(index)
print("Unique elements: ", unique_elements)  # Index object
print(unique_elements.tolist())  # List object

```

## The mechanics of interacting with data in Series and DataFrame

### Question: You're working with a dataset of daily stock prices for a portfolio of companies. The dataset has missing values for certain days, and you want to reindex it to ensure you have a complete set of daily data for a specified date range. You need to create a Python function that takes several arguments to demonstrate the use of the reindex() method and its optional parameters. Your task is to implement the reindex_stock_data() function, which demonstrates the use of these parameters. The function should reindex the stock price data to the specified date range, filling missing data with the provided fill_value and considering the other optional parameters.

-   `data`: A DataFrame containing stock price data with a date index.
-   `start_date`: The start date of the desired date range.
-   `end_date`: The end date of the desired date range.
-   `fill_value`: The value to fill missing data points.
-   `method`: A method to use for filling missing values (e.g., 'ffill', 'bfill').
-   `limit`: The maximum number of consecutive NaN values to fill.
-   `tolerance`: The maximum allowed difference in the index value when reindexing.
-   `level`: The level in case of MultiIndex.
-   `copy`: Whether to create a copy of the original data or reindex in-place.

```{python}
# Function to reindex data as the parameters instruct
def reindex_stock_data(
    data,
    start_date,
    end_date,
    fill_value,
    method=None,
    limit=None,
    tolerance=None,
    level=None,
    copy=False
):
    # print("fill_value passed in: " + str(fill_value))
    # Fill NaN values with the specified fill_value
    data_filled = data.fillna(fill_value)
    # print("data_filled:\n", data_filled)

    # Generate fixed-frequency Datetime index - index of dates and times
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')

    # Reindex the filled data
    result = data_filled.reindex(date_range, method=method, tolerance=tolerance,
                                 limit=limit, fill_value=fill_value, level=level, copy=copy)
    return result

# Create an incomplete initial data for testing
data = pd.DataFrame({
    'AAPL': [150, 151, np.nan, 153, np.nan],
    'GOOGL': [2000, np.nan, 2020, 2030, 2040],
    'MSFT': [300, np.nan, 302, np.nan, 304],
    'AMZN': [3500, 3510, np.nan, np.nan, 3540],
    'TSLA': [np.nan, 701, 702, 703, np.nan]
}, index=pd.date_range(start='2022-01-01', periods=5, freq='D'))
print("Original data:\n", data)

# Set parameters and values for the function - reindexing
start_date = '2022-01-01'
end_date = '2022-01-05'
fill_value = 0
method = 'bfill'  # Backward fill
limit = 1
tolerance = '1D'  # Tolerance of 1 day
level = None
copy = True

# print("fill_value is: ", str(fill_value))
# Call the function and reindex the data
result = reindex_stock_data(
    data, start_date, end_date, fill_value, method, limit, tolerance, level, copy)
print("Result re-indexed data:\n", result)
```

Question: Create a DataFrame called 'sales_data' that contains sales data for various products in different stores. Use the 'sales_data' and create DataFrames below.
- 
```{python}
import pandas as pd

# Create a dictionary of store sales data and a DataFrmae
data = {
    'Store': ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'],
    'Products': ['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z'],
    'Sales': [1000, 1500, 1200, 2000, 1800, 2200, 1200, 1400, 1100]
}

sales_data = pd.DataFrame(data)
print(sales_data)
```
```{python}
# Create a DataFrame called 'store_A_sales', 
# by selecting all the products sold in Store A

cond = sales_data['Store'] == 'A'
store_A_sales = sales_data[cond]
print(store_A_sales)
```

Create a DataFrame called 'high_sales_products' for rows where 'Sales' is greater than or equal to 1500. Use the DataFrame 'sales_data'. Display only 'Products' and 'Sales' columns.
```{python}
# Create a DataFrame indexing with Boolean values meeting the sales condition
high_sales_products = sales_data.loc[sales_data['Sales'] >= 1500, ['Products', 'Sales']]
print("High sales products from store 'A'\n", high_sales_products)
```


